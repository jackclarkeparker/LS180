Set Up Database



CREATE DATABASE billing;

\c billing

CREATE TABLE customers(
  id serial PRIMARY KEY,
  name text NOT NULL,
  payment_token char(8) UNIQUE NOT NULL CHECK(payment_token BETWEEN 'A' AND 'Z')
);

CREATE TABLE services(
  id serial PRIMARY KEY,
  description text NOT NULL,
  price numeric(10, 2) NOT NULL CHECK(price >= 0.00)
);

CREATE TABLE customers_services(
  id serial PRIMARY KEY,
  customer_id integer NOT NULL REFERENCES customers(id) ON DELETE CASCADE,
  service_id integer NOT NULL REFERENCES services(id),
  UNIQUE(customer_id, service_id)
);

INSERT INTO customers(name, payment_token)
  VALUES ('Pat Johnson', 'XHGOAHEQ'),
         ('Nancy Monreal', 'JKWQPJKL'),
         ('Lynn Blake', 'KLZXWEEE'),
         ('Chen Ke-Hua', 'KWETYCVX'),
         ('Scott Lakso', 'UUEAPQPS'),
         ('Jim Pornot', 'XKJEYAZA');

INSERT INTO services(description, price)
  VALUES ('Unix Hosting', 5.95),
         ('DNS', 4.95),
         ('Whois Registration', 1.95),
         ('High Bandwidth', 15.00),
         ('Business Support', 250.00),
         ('Dedicated Hosting', 50.00),
         ('Bulk Email', 250.00),
         ('One-to-one Training', 999.00);

INSERT INTO customers_services(customer_id, service_id)
  VALUES (1, 1), (1, 2), (1, 3),
         (3, 1), (3, 2), (3, 3), (3, 4), (3, 5),
         (4, 1), (4, 4),
         (5, 1), (5, 2), (5, 6),
         (6, 1), (6, 6), (6, 7);



SO the Approach/Algorithm section indicates that I'll need to use a regular expression to add
a valid constraint for the payment_token column (ensure all values are uppercase letters)

I found a way to do this using comparison predicates (BETTEEN 'A' AND 'Z').
This is actually pretty explicit too.
However, I'll look into a regex solution now.

Just realised that my check didn't actually work as I imagined it did.
It's not case sensitive, eventhough I thought I checked this.


ALTER TABLE customers DROP CONSTRAINT customers_payment_token_check;

ALTER TABLE customers
  ADD CONSTRAINT customers_payment_token_check CHECK (payment_token ~ '[A-Z]{8}');

^^ These two statements resolve the problem.











